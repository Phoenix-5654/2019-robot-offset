#!/usr/bin/env python3
from heapq import nsmallest
from math import sqrt
import itertools


import cv2
import numpy as np
from networktables import NetworkTables

from cscore import CameraServer, UsbCamera, VideoSource

HORIZONTAL_RES = 240
VERTICAL_RES = 320
SETPOINT = (VERTICAL_RES // 2, HORIZONTAL_RES // 2 + 38)
JSON_CONFING = """
    {
    "fps": 90,
    "height": 240,
    "pixel format": "mjpeg",
    "properties": [
        {
            "name": "connect_verbose",
            "value": 1
        },
        {
            "name": "raw_brightness",
            "value": 50
        },
        {
            "name": "brightness",
            "value": 35
        },
        {
            "name": "raw_contrast",
            "value": 0
        },
        {
            "name": "contrast",
            "value": 30
        },
        {
            "name": "raw_saturation",
            "value": 0
        },
        {
            "name": "saturation",
            "value": 100
        },
        {
            "name": "red_balance",
            "value": 1000
        },
        {
            "name": "blue_balance",
            "value": 1000
        },
        {
            "name": "horizontal_flip",
            "value": false
        },
        {
            "name": "vertical_flip",
            "value": false
        },
        {
            "name": "power_line_frequency",
            "value": 1
        },
        {
            "name": "raw_sharpness",
            "value": 0
        },
        {
            "name": "sharpness",
            "value": 50
        },
        {
            "name": "color_effects",
            "value": 0
        },
        {
            "name": "rotate",
            "value": 0
        },
        {
            "name": "color_effects_cbcr",
            "value": 32896
        },
        {
            "name": "video_bitrate_mode",
            "value": 0
        },
        {
            "name": "video_bitrate",
            "value": 10000000
        },
        {
            "name": "repeat_sequence_header",
            "value": false
        },
        {
            "name": "h264_i_frame_period",
            "value": 60
        },
        {
            "name": "h264_level",
            "value": 11
        },
        {
            "name": "h264_profile",
            "value": 4
        },
        {
            "name": "auto_exposure",
            "value": 0
        },
        {
            "name": "exposure_time_absolute",
            "value": 1000
        },
        {
            "name": "exposure_dynamic_framerate",
            "value": false
        },
        {
            "name": "auto_exposure_bias",
            "value": 12
        },
        {
            "name": "white_balance_auto_preset",
            "value": 1
        },
        {
            "name": "image_stabilization",
            "value": false
        },
        {
            "name": "iso_sensitivity",
            "value": 0
        },
        {
            "name": "iso_sensitivity_auto",
            "value": 1
        },
        {
            "name": "exposure_metering_mode",
            "value": 0
        },
        {
            "name": "scene_mode",
            "value": 0
        },
        {
            "name": "compression_quality",
            "value": 30
        }
    ],
    "width": 320
}
    """


class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """

    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__hsv_threshold_hue = [63.12949640287769, 98.60068259385666]
        self.__hsv_threshold_saturation = [0, 255.0]
        self.__hsv_threshold_value = [75.67446043165468, 255.0]

        self.hsv_threshold_output = None

        self.__find_contours_input = self.hsv_threshold_output
        self.__find_contours_external_only = False

        self.find_contours_output = None

        self.__filter_contours_contours = self.find_contours_output
        self.__filter_contours_min_area = 150.0
        self.__filter_contours_min_perimeter = 0
        self.__filter_contours_min_width = 0
        self.__filter_contours_max_width = 1000
        self.__filter_contours_min_height = 0
        self.__filter_contours_max_height = 1000
        self.__filter_contours_solidity = [0.0, 100]
        self.__filter_contours_max_vertices = 1000000
        self.__filter_contours_min_vertices = 0
        self.__filter_contours_min_ratio = 0
        self.__filter_contours_max_ratio = 1000

        self.filter_contours_output = None

        self.__convex_hulls_contours = self.filter_contours_output

        self.convex_hulls_output = None

    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSV_Threshold0:
        self.__hsv_threshold_input = source0
        (self.hsv_threshold_output) = self.__hsv_threshold(self.__hsv_threshold_input, self.__hsv_threshold_hue,
                                                           self.__hsv_threshold_saturation, self.__hsv_threshold_value)

        # Step Find_Contours0:
        self.__find_contours_input = self.hsv_threshold_output
        (self.find_contours_output) = self.__find_contours(self.__find_contours_input,
                                                           self.__find_contours_external_only)

        # Step Filter_Contours0:
        self.__filter_contours_contours = self.find_contours_output
        (self.filter_contours_output) = self.__filter_contours(self.__filter_contours_contours,
                                                               self.__filter_contours_min_area,
                                                               self.__filter_contours_min_perimeter,
                                                               self.__filter_contours_min_width,
                                                               self.__filter_contours_max_width,
                                                               self.__filter_contours_min_height,
                                                               self.__filter_contours_max_height,
                                                               self.__filter_contours_solidity,
                                                               self.__filter_contours_max_vertices,
                                                               self.__filter_contours_min_vertices,
                                                               self.__filter_contours_min_ratio,
                                                               self.__filter_contours_max_ratio)

        # Step Convex_Hulls0:
        self.__convex_hulls_contours = self.filter_contours_output
        (self.convex_hulls_output) = self.__convex_hulls(self.__convex_hulls_contours)

    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]), (hue[1], sat[1], val[1]))

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if (external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        im2, contours, hierarchy = cv2.findContours(input, mode=mode, method=method)
        return contours

    @staticmethod
    def __filter_contours(input_contours, min_area, min_perimeter, min_width, max_width,
                          min_height, max_height, solidity, max_vertex_count, min_vertex_count,
                          min_ratio, max_ratio):
        """Filters out contours that do not meet certain criteria.
        Args:
            input_contours: Contours as a list of numpy.ndarray.
            min_area: The minimum area of a contour that will be kept.
            min_perimeter: The minimum perimeter of a contour that will be kept.
            min_width: Minimum width of a contour.
            max_width: MaxWidth maximum width.
            min_height: Minimum height.
            max_height: Maximimum height.
            solidity: The minimum and maximum solidity of a contour.
            min_vertex_count: Minimum vertex Count of the contours.
            max_vertex_count: Maximum vertex Count.
            min_ratio: Minimum ratio of width to height.
            max_ratio: Maximum ratio of width to height.
        Returns:
            Contours as a list of numpy.ndarray.
        """
        output = []
        for contour in input_contours:
            x, y, w, h = cv2.boundingRect(contour)
            if (w < min_width or w > max_width):
                continue
            if (h < min_height or h > max_height):
                continue
            area = cv2.contourArea(contour)
            if (area < min_area):
                continue
            if (cv2.arcLength(contour, True) < min_perimeter):
                continue
            hull = cv2.convexHull(contour)
            solid = 100 * area / cv2.contourArea(hull)
            if (solid < solidity[0] or solid > solidity[1]):
                continue
            if (len(contour) < min_vertex_count or len(contour) > max_vertex_count):
                continue
            ratio = (float)(w) / h
            if (ratio < min_ratio or ratio > max_ratio):
                continue
            output.append(contour)
        return output

    @staticmethod
    def __convex_hulls(input_contours):
        """Computes the convex hulls of contours.
        Args:
            input_contours: A list of numpy.ndarray that each represent a contour.
        Returns:
            A list of numpy.ndarray that each represent a contour.
        """
        output = []
        for contour in input_contours:
            output.append(cv2.convexHull(contour))
        return output

class Shape:
    def __init__(self, points, center, angle, width, height):
        self.points = points
        self.center = center
        self.angle = abs(angle)
        self.width = width
        self.height = height

    def get_lowest_point(self):
        return self.points[0]

    def get_second_highest_point(self):
        return nsmallest(2, self.points, key=lambda x: x[1])[-1]

    def get_approx_area(self):
        return self.width * self.height

    def get_middle_point(self, shape):
        return get_average_point(self.center, shape.center)


def get_average_point(point1, point2):
    return (int(point1[0] + point2[0]) // 2,
            int(point1[1] + point2[1]) // 2)

def start_camera():
    inst = CameraServer.getInstance()
    camera = UsbCamera('Hatch Panels', '/dev/video0')
    camera.setConfigJson(JSON_CONFING)
    camera.setFPS(90)
    inst.startAutomaticCapture(camera=camera, return_server=True)

    camera.setConnectionStrategy(VideoSource.ConnectionStrategy.kKeepOpen)

    return inst, camera

def find_alignment_center(shapes):
    max_area = 0
    point = None
    combinations = itertools.combinations(shapes, 2)
    for combination in combinations:
        if distance(combination[0].get_lowest_point(), combination[1].get_lowest_point()) > \
            distance(combination[0].get_second_highest_point(), combination[1].get_second_highest_point()) \
            and combination[0].get_approx_area() + combination[1].get_approx_area() > max_area:
            max_area = combination[0].get_approx_area() + combination[1].get_approx_area()
            point = combination[0].get_middle_point(combination[1])
    return point

def distance(point1: tuple, point2: tuple):
    return sqrt(pow(point1[0] - point2[0], 2) + pow(point1[1] - point2[1], 2))


def main():
    NetworkTables.initialize(server='10.56.54.2')

    widgets = {}



    sd = NetworkTables.getTable('Vision')

    inst, camera = start_camera()

    pipeline = GripPipeline()

    cvSink = inst.getVideo(camera=camera)

    outputStream = inst.putVideo(
        'Hatch Panels Convex Hulls', HORIZONTAL_RES, VERTICAL_RES)

    img = np.zeros(shape=(VERTICAL_RES, HORIZONTAL_RES, 3), dtype=np.uint8)

    while True:

        shapes = []

        time, img = cvSink.grabFrame(img)

        if time == 0:

            outputStream.notifyError(cvSink.getError())

            continue

        pipeline.process(img)

        drawing = np.zeros((HORIZONTAL_RES, VERTICAL_RES, 3), np.uint8)

        if len(pipeline.convex_hulls_output) != 0:
            for hull in pipeline.convex_hulls_output:
                rect = cv2.minAreaRect(hull)
                box = cv2.boxPoints(rect)
                box = np.int0(box)

                x, y, w, h = cv2.boundingRect(hull)
                cv2.rectangle(drawing, (x,y), (x + w, y + h), (100, 10, 100), 5)


                shapes.append(Shape(box, rect[0], rect[2], w, h))
                cv2.drawContours(drawing, [box], 0, (0, 0, 255), 4)

                for i in range(len(pipeline.convex_hulls_output)):
                    cv2.drawContours(
                        drawing, pipeline.convex_hulls_output, i, (255, 0, 0), 3)

            if len(shapes) == 1:
                if shapes[0].angle > 45:
                    alignment_center = (VERTICAL_RES, shapes[0].center[1])
                else:
                    alignment_center = (0, shapes[0].center[1])
            else:
                alignment_center = find_alignment_center(shapes)

            if alignment_center is not None:

                cv2.circle(drawing, tuple(map(int, alignment_center)), 5, (0, 255, 0), 5)

                sd.putNumber('X Error', SETPOINT[0] - alignment_center[0])
                sd.putNumber('Y Error', SETPOINT[1] - alignment_center[1])

        outputStream.putFrame(drawing)


if __name__ == "__main__":
    main()
